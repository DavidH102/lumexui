@import '../variables';

// Functions

// Returns a minimum breakpoint width or null for the smallest breakpoint.
@function breakpoint-min($name) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

// Returns a minimum breakpoint width.
@function breakpoint-max($name) {
	$max: map-get($breakpoints, $name);
	@return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint,
// otherwise returns the name with a colon at the end.
@function breakpoint-prefix($name) {
	@return if(breakpoint-min($name) == null, "", "#{$name}\\:");
}

// Turns maps into its negative variant.
@function inverse-map($map) {
	$result: ();

	@each $key, $value in $map {
		@if $key != 0 {
			$result: map-merge($result, ($key: (-$value)));
		}
	}

	@return $result;
}

// Merge multiple maps
@function map-merge-multiple($maps...) {
	$merged-maps: ();

	@each $map in $maps {
		$merged-maps: map-merge($merged-maps, $map);
	}

	@return $merged-maps;
}

// Colors
@function to-rgb($value) {
	@return red($value) green($value) blue($value);
}

@function rgb-css-var($identifier, $target) {
	@return RGB(#{$identifier} / var(--#{$prefix}-#{$target}-opacity, 1));
}

@function map-loop($map, $func, $args...) {
	$_map: ();

	@each $key, $value in $map {
		$_args: ();

		@each $arg in $args {
			$_args: append($_args, if($arg == "$key", $key, if($arg == "$value", $value, $arg)));
		}

		$_map: map-merge($_map, ($key: call(get-function($func), $_args...)));
	}

	@return $_map;
}
