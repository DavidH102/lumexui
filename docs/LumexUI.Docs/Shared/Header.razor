@implements IAsyncDisposable

<LumexNavbar Sticky="@true"
             Bordered="@true"
             Breakpoint="@Breakpoint.Xxl"
             ExpandBreakpoint="@Breakpoint.Lg"
             Class="ld-header">
    <LumexNavbarBrand>
        <img src="_content/LumexUI.Docs/assets/images/logo_light.svg" width="160" />
    </LumexNavbarBrand>

    <LumexDrawer Id="header" Anchor="@Anchor.End" Breakpoint="@Breakpoint.Lg">
        <BodyContent>
            <LumexNavbarContent Class="gap-4 lg:gap-6 lh-6">
                <LumexNavbarItem>
                    <LumexLink Route="docs/overview">Docs</LumexLink>
                </LumexNavbarItem>
                <LumexNavbarItem>
                    <LumexLink Route="docs/getting-started">Getting Started</LumexLink>
                </LumexNavbarItem>
                <LumexNavbarItem>
                    <LumexLink Route="about">About Us</LumexLink>
                </LumexNavbarItem>
            </LumexNavbarContent>

            <LumexNavbarContent>
                <LumexNavbarItem Class="lg:ms-6">
                    <LumexDivider Orientation="@( LgBreakpoint.Matched ? Orientation.Vertical : Orientation.Horizontal)" Class="mt-4 lg:mt-0" />
                </LumexNavbarItem>
                <LumexNavbarItem>
                    <LumexIconButton Icon="@Icons.Rounded.LightMode" />
                </LumexNavbarItem>
                <LumexNavbarItem>
                    <LumexLink Route="https://github.com/LumexUI/lumexui">
                        <LumexIcon Icon="@Icons.Brands.GitHub" ViewBox="0 0 100 100" />
                    </LumexLink>
                </LumexNavbarItem>
            </LumexNavbarContent>
        </BodyContent>
    </LumexDrawer>

    <LumexNavbarContent Class="lg:hidden">
        <LumexNavbarItem>
            <LumexIconButton Icon="@Icons.Rounded.MoreVert" OnClick="@(() => DrawerService.Toggle("header"))" />
        </LumexNavbarItem>
    </LumexNavbarContent>
</LumexNavbar>

@code {
    [Inject] private IDrawerService DrawerService { get; set; } = default!;
    [Inject] private IMediaQueryListener LgBreakpoint { get; set; } = default!;

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if( firstRender )
        {
            await LgBreakpoint.MatchAsync( Breakpoints.LargeUp, StateHasChanged );
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await LgBreakpoint.DisposeAsync();
    }
}